<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 生成器配置,包含以下子元素(有严格的顺序):
	<properties> (0-1个)
	<classPathEntry> (0-*个)
	<context> (1-*个) -->
<generatorConfiguration>
	<!-- 加载配置项或者配置文件,非必填
		在整个配置文件中可以使用${propertyKey}的方式来引用配置项
		resource: 配置classpath下资源加载地址
		url: 配置绝对路径下资源加载地址,比如file:///C:/conf/generatorConfig.properties
		注意,两个属性只能选择一个;
		另外,如果使用了mybatis-generator-maven-plugin,那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用  -->
	<properties resource="jdbc.properties" />

	<!-- 加载MBG需要额外的依赖包,只包括:
		1.JDBC驱动内省数据库
		2.加载根类中的JavaModelGenerator检查重写的方法
		location属性指明加载jar/zip包的全路径 -->
	<!-- <classPathEntry location="C:\Users\mysql-connector-java-5.1.43.jar" /> -->

	<!-- 生成一组对象的环境
		id: 必选,上下文唯一标识,用于在生成错误时提示
		defaultModelType: 指定生成对象的样式
			1. conditional(默认): 类似hierarchical,除了如果那个单独的类将只包含一个字段,将不会生成一个单独的类;
			2. flat(推荐): 所有内容(主键,blob等)全部生成在一个对象中;
			3. hierarchical: 如果表有主键,那么该模型会产生一个单独的主键实体类,如果表还有BLOB字段,则会为表生成一个包含所有BLOB字段的单独的实体类,然后为所有其他的字段生成一个单独的实体类.MBG会在所有生成的实体类之间维护一个继承关系
		targetRuntime:
			1. MyBatis3(默认): 生成基于MyBatis3.x以上版本的内容,包括XXXBySample;
			2. MyBatis3Simple: 类似MyBatis3,只是不生成XXXBySample;
		introspectedColumnImpl: 类全限定名,用于扩展MBG -->
	<context id="mysql" defaultModelType="flat" targetRuntime="MyBatis3Simple">

		<!-- 当表名或者字段名为SQL关键字的时候,可以设置该属性为true,MBG会自动给表名或字段名添加分隔符'`'
			(一般保留默认值false,遇到数据库关键字,使用columnOverride覆盖) -->
		<property name="autoDelimitKeywords" value="false" />

		<!-- 生成的Java文件的编码,默认使用当前平台的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />

		<!-- 格式化java代码 -->
		<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />

		<!-- 格式化XML代码 -->
		<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />

		<!-- beginningDelimiter和endingDelimiter:指明数据库的用于标记数据库对象名的符号,比如ORACLE就是双引号,MYSQL默认是`反引号 -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />
		
		<!-- 生成表或字段的备注信息配置,可以通过type指定用户的实现类 -->
		<commentGenerator>
			<property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true" />
        </commentGenerator>

		<!-- 配置链接数据库 -->
		<jdbcConnection driverClass="${driver}" connectionURL="${url}" userId="${username}" password="${password}">
			<!-- 这里面可以设置property属性,每一个property属性都设置到配置的Driver上 -->
			<property name="useUnicode" value="true" />
			<property name="characterEncoding" value="utf-8" />
			<property name="useSSL" value="false" />
		</jdbcConnection>

		<!-- java类型处理器,用于处理DB中的类型到Java中的类型,默认使用JavaTypeResolverDefaultImpl
			注意:默认会先尝试使用Integer,Long,Short等来对应DECIMAL和NUMERIC数据类型 -->
		<javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
			<!-- 
				true:使用BigDecimal对应DECIMAL和NUMERIC数据类型
				false(默认): 精度scale,长度length:
					scale>0 || length>18:使用BigDecimal;
					scale=0 && length[10,18]:使用Long;
					scale=0 && length[5,9]:使用Integer;
					scale=0 && length<5:使用Short;-->
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- java模型创建器,必填
			targetPackage: 生成的类要放的包,真实的包受enableSubPackages属性控制;
			targetProject: 目标项目,指定一个存在的目录下,生成的内容会放到指定目录中,如果目录不存在,MBG不会创建目录 -->
		<javaModelGenerator targetPackage="com.sunveee.template.ssm.entity.mbg" targetProject="src/main/java">

			<!-- for MyBatis3.true:使用构造方法入参,false(默认):使用setter方式 -->
			<property name="constructorBased" value="false" />

			<!-- 在targetPackage的基础上,根据数据库的schema再生成一层package,最终生成的类放在这个package下,默认为false -->
			<property name="enableSubPackages" value="true" />

			<!-- 该属性用来配置实体类属性是否可变,如果设置为true,那么constructorBased不管设置成什么,都会使用构造方法入参,并且不会生成setter方法.如果为false,实体类属性就可以改变.默认为false -->
			<property name="immutable" value="false" />

			<!-- 设置所有实体类的基类;在Table的rootClass属性中可以覆盖该选项,如果MBG能够加载rootClass,那么MBG不会覆盖和父类中完全匹配的属性,匹配规则: 
				1. 属性名相同; && 2. 类型相同; && 3. 有相同的getter/setter方法;-->
			<!-- <property name="rootClass" value="" /> -->

			<!-- 设置是否在getter方法中,对String类型字段调用trim()方法,默认false -->
			<property name="trimStrings" value="true" />

		</javaModelGenerator>

		<!-- 生成mapper.xml
			如果targetRuntime是iBATIS2,该元素必须配置一个.
			如果targetRuntime目标是MyBatis3,只有当<javaClientGenerator>需要XML时,该元素必须配置一个.如果没有配置<javaClientGenerator>,则使用以下的规则:
				如果指定了一个<sqlMapGenerator>,那么MBG将只生成XML的SQL映射文件和实体类.
				如果没有指定<sqlMapGenerator>,那么MBG将只生成实体类. -->
		<sqlMapGenerator targetPackage="mapping.mbg" targetProject="src/main/resources">
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>

		<!-- 生成Mapper接口,如果没有配置该元素,那么不会生成Mapper接口
			type:必选,在MyBatis3/MyBatis3Simple下:
				1. ANNOTATEDMAPPER: 会生成使用Mapper接口+Annotation的方式创建(SQL生成在annotation中),不会生成对应的XML;
				2. MIXEDMAPPER: 使用混合配置,会生成Mapper接口,并适当添加合适的Annotation,但是SQL会生成在XML中;
				3. XMLMAPPER: 会生成Mapper接口,接口完全依赖XML;
				如果context是MyBatis3Simple: 只支持ANNOTATEDMAPPER和XMLMAPPER -->
		<javaClientGenerator targetPackage="com.sunveee.template.ssm.dao.mbg" type="XMLMAPPER" targetProject="src/main/java">
			<property name="enableSubPackages" value="true" />

			<!-- 可以为所有生成的接口添加一个父接口,但是MBG只负责生成,不负责检查  -->
			<!-- <property name="rootInterface" value=""/> -->
		</javaClientGenerator>

		<!-- 选择一个table来生成相关文件,一至多个
			tableName:必填,要生成对象的表名
			注意:大小写敏感问题.正常情况下,MBG会自动的去识别数据库标识符的大小写敏感度,在一般情况下,MBG会根据设置的schema,catalog或tablename去查询数据表,按照下面的流程: 
				1. 如果schema,catalog或tablename中有空格,那么设置的是什么格式,就精确的使用指定的大小写格式去查询;
				2. 否则,如果数据库的标识符使用大写的,那么MBG自动把表名变成大写再查找;
				3. 否则,如果数据库的标识符使用小写的,那么MBG自动把表名变成小写再查找;
				4. 否则,使用指定的大小写格式查询;另外的,如果在创建表的时候,使用的""把数据库对象规定大小写,就算数据库标识符是使用的大写,在这种情况下也会使用给定的大小写来创建表名,这个时候,请设置delimitIdentifiers="true"即可保留大小写格式
			可选: 
				1. schema:数据库的schema,可以使用SQL通配符匹配.如果设置了该值,生成SQL的表名会变成如schema.tableName的形式.
				2. catalog:数据库的catalog,如果设置了该值,生成SQL的表名会变成如catalog.tableName的形式.
				3. alias:为数据表设置的别名,如果设置了alias,那么生成的所有的SELECT SQL语句中,列名会变成:alias_actualColumnName;
				4. domainObjectName:生成的domain类的名字,如果不设置,直接使用表名作为domain类的名字;可以设置为somepck.domainName,那么会自动把domainName类再放到somepck包里面;
				5. enableInsert(默认true):指定是否生成insert语句;
				6. enableSelectByPrimaryKey(默认true):指定是否生成按照主键查询对象的语句(就是getById或get);
				7. enableSelectByExample(默认true):MyBatis3Simple为false,指定是否生成动态查询语句;
				8. enableUpdateByPrimaryKey(默认true):指定是否生成按照主键修改对象的语句(即update);
				9. enableDeleteByPrimaryKey(默认true):指定是否生成按照主键删除对象的语句(即delete);
				10. enableDeleteByExample(默认true):MyBatis3Simple为false,指定是否生成动态删除语句;
				11. enableCountByExample(默认true):MyBatis3Simple为false,指定是否生成动态查询总条数语句(用于分页的总条数查询);
				12. enableUpdateByExample(默认true):MyBatis3Simple为false,指定是否生成动态修改语句(只修改对象中不为空的属性);
				13. modelType:参考context元素的defaultModelType,这里的配置会覆盖context中的配置;
				14. delimitIdentifiers(默认false):是否给标识符增加分隔符,当catalog,schema或tableName中包含空白时,默认为true;
				15. delimitAllColumns(默认false):是否对所有列添加分隔符;
			table里面很多参数都是对javaModelGenerator,context等元素的默认属性的一个复写 -->
		<table tableName="user">

			<property name="constructorBased" value="false" />

			<!-- 默认为false,如果设置为true,在生成的SQL中,table名字不会加上catalog或schema -->
			<property name="ignoreQualifiersAtRuntime" value="false" />

			<property name="immutable" value="false" />

			<!-- 指定是否只生成domain类,如果设置为true,只生成domain类,如果还配置了sqlMapGenerator,那么在mapper.xml文件中只生成resultMap元素 -->
			<property name="modelOnly" value="false" />

			<!-- <property name="rootClass" value=""/> -->

			<!-- <property name="rootInterface" value=""/> -->

			<!-- 在生成的SQL中使用指定的catalog,而不是table元素上的catalog -->
			<!-- <property name="runtimeCatalog" value=""/> -->

			<!-- 在生成的SQL中使用指定的schema,而不是table元素上的schema -->
			<!-- <property name="runtimeSchema" value=""/> -->

			<!-- 在生成的SQL中使用指定的tablename,而不是table元素上的tablename -->
			<!-- <property name="runtimeTableName" value=""/> -->

			<!-- for MyBatis3Simple:生成一个SelectAll方法,在该SQL中添加指定的order条件 -->
			<property name="selectAllOrderByClause" value="id asc" />

			<!-- true:那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性
				false(默认值):MGB将会尝试将返回的名称转换为驼峰形式 -->
			<property name="useActualColumnNames" value="false" />

			<!-- generatedKey用于生成生成主键的方法,可选,如果设置了该元素,MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素
				column:主键的列名;
				sqlStatement:将返回新值的SQL语句.如果这是一个identity列,可以使用其中一个预定义的的特殊值 -->
			<!-- <generatedKey column="" sqlStatement=""/> -->

			<!-- 在生成列之前,对列进行重命名,0-1个.对生成属性名时去除前缀的表非常有用,对CUST_XXX可以通过如下方式定义重命名规则:
				<columnRenamingRule searchString="^CUST_" replaceString="" />
				在内部,MBG使用java.util.regex.Matcher.replaceAll方法实现这个功能
				当<columnOverride>匹配一列时,<columnRenamingRule>会被忽略
				searchString:必选,定义将被替换的字符串的正则表达式;
				replaceString:可选,用来替换搜索字符串列每一个匹配项的字符串.没有指定会使用空字符串 -->
			<!-- <columnRenamingRule searchString="" replaceString=""/> -->

			<!-- 用来修改表中某个列的属性,MBG会使用修改后的列来生成domain的属性,0-*个
				column:要重新设置的列名 -->
			<columnOverride column="name">
				<!-- 使用property属性来指定列要生成的属性名称 -->
				<property name="property" value="name" />

				<!-- javaType用于指定生成的domain的属性类型,使用类型的全限定名 -->
				<!-- <property name="javaType" value=""/> -->

				<!-- jdbcType用于指定该列的JDBC类型 -->
				<!-- <property name="jdbcType" value=""/> -->

				<!-- typeHandler 用于指定该列使用到的TypeHandler,如果要指定,配置类型处理器的全限定名
					mybatis中不会生成到mybatis-config.xml中的typeHandler,只会生成类似:where id = #{id,jdbcType=BIGINT,typeHandler=com.sunveee.MyTypeHandler}的参数描述 -->
				<!-- <property name="jdbcType" value=""/> -->

				<!-- 参考table元素的delimitAllColumns配置,默认为false -->
				<!-- <property name="delimitedColumnName" value=""/> -->
			</columnOverride>

			<!-- 设置一个MGB忽略的列,如果设置了该列,那么在生成的domain中,生成的SQL中,都不会有该列出现
				column:指定要忽略的列的名字;
				delimitedColumnName(默认false):参考table元素的delimitAllColumns配置,默认为false -->
			<!-- <ignoreColumn column="deptId" delimitedColumnName=""/> -->
		</table>

	</context>

</generatorConfiguration>
